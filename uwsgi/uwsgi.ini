[uwsgi]
# the local unix socket file than communicate to Nginx   用于和 nginx 进行数据交互的端口
socket = 127.0.0.1:8081

# the base directory (full path)  django 程序的主目录
chdir = /mxdyeah/epg

# Django's wsgi file
wsgi-file = /mxdyeah/epg/epg/wsgi.py

# maximum number of worker processes
# 根据4核心CPU，建议设置为 4 个进程，每个进程单独使用一个核心
processes = 4

# thread numbers started in each worker process
# 每个进程建议设置 2~4 个线程，充分利用多线程处理请求
threads = 2

# 启用主进程来管理其他进程，其它的uwsgi进程都是这个master进程的子进程
master = true

# clear environment on exit
vacuum = true

# 后台运行,并输出日志
daemonize = /mxdyeah/epg/uwsgi/uwsgi.log

# pid 文件地址
pidfile = /mxdyeah/epg/uwsgi/uwsgi.pid

# 启用线程，允许用内嵌的语言启动线程
enable-threads = true

# 当服务停止的时候自动移除 unix Socket 和 pid 文件
vacuum = true

# 不记录信息日志，只记录错误以及 uwsgi 内部消息
disable-logging = true

# 设置最大日志文件大小
log-maxsize = 5242880

# 为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）
# 根据内存限制，建议每个进程处理 10,000 个请求后重启
max-requests = 10000

# 一个请求花费的时间超过了这个 harakiri 超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）
# 根据应用场景调整为 120 秒，适合多数场景
harakiri = 120

# 超出 1GB 时重启工作进程
reload-on-as = 1073741824

# 设置缓冲区大小，避免处理大请求时失败
buffer-size = 65535

# 防止僵尸进程
no-orphans = true

# 优化服务性能，减少内存碎片
thunder-lock = true
lazy-apps = true

# 优化线程处理，防止队列过载
cheap = true

# 设置 uwsgi 的信号量
disable-logging = true
